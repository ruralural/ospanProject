#=====TODO====

#lst:
#-compare 2 lists - get data
#-add time limitation for test(1.5min max)
#-add time count
#-german song, foreign language song in .wav formats
#-export data from math problems, lists comparison, 
#time data(probably divide data from different test 
#depending on choosed music composition ''test with music
#without lyrics: math problem answers(true, false), 
#right words sequence percentage, time spent on task)

define Start(param)
{
	##Setup the screen
	lBG <- MakeColorRGB(221, 223, 212)
	gWindow <- MakeWindow(lBG)

	##Screen dimensions
	gWidth <- Nth(GetCurrentScreenResolution(), 1)
	gHeight <- Nth(GetCurrentScreenResolution(), 2)

	lBG <- MakeColorRGB(221, 223, 212)
	lFG <- MakeColorRGB(23, 62, 67)
	gColorRed <- MakeColorRGB(181, 105, 105)
	gColorYel <- MakeColorRGB(250, 229, 150)
	#gColorYel <- MakeColorRGB(249, 239, 204) 
	
	##Fontsize and font
	gFontSize <- Round(gWidth/40)
	gFont <- MakeFont("Calibri.ttf", 0, gFontSize, lFG,lBG,0)
	gErrorFont <- MakeFont("Calibri.ttf", 0, gFontSize, gColorRed, gColorRed, 0)
	gCorrectFont <- MakeFont("Calibri.ttf", 0, gFontSize, gColorYel, gColorYel, 0)

	##Font settings for expression
	gFontSizeExp <- 50
	gFontExp <- MakeFont("Calibri.ttf", 0, gFontSizeExp, lFG,lBG,0)

	gSubNum <- GetSubNum(gWindow)

	while (gSubNum == "") {
		errorLabel <- MakeLabel("Bitte gib deine Identifikation-Nummer ein", gErrorFont)
		Move(errorLabel, gWidth/2, 400)
		AddObject(errorLabel, gWindow)
		Draw()
		Wait(1500)
		Hide(errorLabel)
		gSubNum <- GetSubNum(gWindow)
	}

	noWordsTrack <- LoadSound("noWords.wav")
	
	gResultsFile <- FileOpenAppend("results/" + gSubNum + ".csv");
	FilePrint(gResultsFile, "Correct answers;Total;Percent")
	
	gLable <- MakeLabel("Welcome to", gFont)
	Move(gLable, gWidth/2, 50)
	
	iLable2 <- MakeLabel("This test is aimed at", gFont)
	Move(iLable2, gWidth/2, 100)
	
	iLable3 <- MakeLabel("You will now be asked to", gFont)
	Move(iLable3, gWidth/2, 150)
	
	iLable4 <- MakeLabel("Please put your headphones on and click gogogo", gFont)
	Move(iLable4, gWidth/2, 200)
	
	AddObject(gLable, gWindow)
	AddObject(iLable2, gWindow)
	AddObject(iLable3, gWindow)
	AddObject(iLable4, gWindow)
	Draw()
	Wait(1000)
	
	Hide(iLable2)
	Hide(iLable3)
	Hide(iLable4)
	
	currentTest <- RandomDiscrete(10)
	
	currentTest <- currentTest +1
	if (currentTest > 10){
		currentTest <- 0
	}
	
	#Defining all needed arrays
	#gExpressionsList <- FileReadList("assets/Expressions" + currentTest +".txt")
	#gSolutionsList <- FileReadList("assets/Solutions" + currentTest + ".txt");
	gExpressionsList <- FileReadList("assets/ExpressionsShort.txt")
	gSolutionsList <- FileReadList("assets/SolutionsShort.txt")
	gWordsList <- FileReadList("assets/wordsLst.txt")
	
	grSize <- 150
	i <- 1
	noLyricsMusic <- "noWords.wav"
	lyricsMusic <- "germanWords.wav"
	foreignLyricsMusic <- ""

	ExecuteTest(noLyricsMusic, i)

	#gSound <- LoadSound("noWords.wav")
	#gPlay <- PlayBackground(gSound)
	#ShowMathProblems(i)
	#gShowedWords <- ListToString(gShowedWords)
	#CheckWords(gShowedWords)
	#Stop(gSound)

	ExecuteTest(lyricsMusic, i)
	#gSound <- LoadSound("noWords.wav")
	#gPlay <- PlayBackground(gSound)
	#ShowMathProblems(i)
	#gShowedWords <- ListToString(gShowedWords)
	#CheckWords(gShowedWords)
	#Stop(gSound)

	#ExecuteTest(foreignLyricsMusic, i)
	#gSound <- LoadSound("noWords.wav")
	#gPlay <- PlayBackground(gSound)
	ShowMathProblems(i)
	gShowedWords <- ListToString(gShowedWords)
	CheckWords(gShowedWords)
	#Stop(gSound)

}

define ShowMathProblems(iterator)
{
	gShowedWords <-[]
	gcorrectAnswCount <- 0

	circle1<- Circle (gWidth/2-grSize-50,480,grSize,gColorYel,1)
	circ1Lable1 <- MakeLabel("if correct", gFont); Move(circ1Lable1, gWidth/2-grSize-50, 470)
	circ1Lable2 <- MakeLabel("press A", gFont); Move(circ1Lable2, gWidth/2-grSize-50, 510)
	AddObject(circle1,gWindow) 
	AddObject(circ1Lable1,gWindow)
	AddObject(circ1Lable2,gWindow)
	
	circle2<- Circle (gWidth/2+grSize+50,480,grSize,gColorRed,1)
	circ2Lable1 <- MakeLabel("if wrong", gFont); Move(circ2Lable1, gWidth/2+grSize+50, 470)
	circ2Lable2 <- MakeLabel("press D", gFont); Move(circ2Lable2, gWidth/2+grSize+50, 510)
	AddObject(circle2,gWindow)
	AddObject(circ2Lable1, gWindow)
	AddObject(circ2Lable2, gWindow)

	while (iterator <= 2)
	{
		#sound <- LoadSound("noWords.wav")
		
		#PlaySound(sound)
		expressionItem <- Nth(gExpressionsList,iterator)
		wordItem <- Nth(gWordsList, RandomDiscrete(100))
		#gShowedWords <-[]
		#gShowedWords <- PushOnEnd(gShowedWords, wordItem)

		expressionLable <- MakeLabel(expressionItem, gFontExp); Move(expressionLable, gWidth/2, 150)
		wordLable <- MakeLabel(wordItem, gFontExp)
		AddObject(expressionLable, gWindow)
		Draw()
		
		response <-Uppercase(WaitForListKeyPress(["A","D","L"]))
		##L = quit
		if(response != "L"){
			if(response == "A"){
				answer <- "1"
			}else{
				answer <- "0"
			}

			rightAnswer <- Nth(gSolutionsList, iterator)

			if(answer == rightAnswer){
				iLable2 <- MakeLabel("Correct", gCorrectFont)
				gcorrectAnswCount <- gcorrectAnswCount + 1
				
			}else{
				iLable2 <- MakeLabel("WRONG", gErrorFont)
			}
			Move(iLable2, gWidth/2, 300)
			DrawAndWait(iLable2, gWindow, 500)

			Move(wordLable, gWidth/2, 300)
			DrawAndWait(wordLable, gWindow, 500)
			gShowedWords <- PushOnEnd(gShowedWords, wordItem)
			
			iterator <- iterator + 1
		}else{
			iterator<- 99999
		}

	}
	FilePrint(gResultsFile, gcorrectAnswCount + ";5;" + ((gcorrectAnswCount/5)*100))
	return gShowedWords
}

define DrawAndWait(object, window, time)
{
	AddObject(object, window)
	Draw()
	Wait(time)
	Hide(object)
}

define CheckWords(lst)
{
	gLable <- MakeLabel("Enter sequence of words withouth spaces and hit the enter", gFont)
	Move(gLable, gWidth/2, 50)
	AddObject(gLable, gWindow)
	tb <-MakeTextBox("",gFontExp,400,400)
    AddObject(tb,gWindow)
    Move(tb,gWidth/2 - 200,480)
    Show(tb)
	gInput <- GetInput(tb, "<return>")
	#gShowedWords <- ListToString(gShowedWords)

	if(gInput==lst)
	{
		answer <- "1"
		label <- MakeLabel("Correct", gCorrectFont)		
	}else{
		answer <- "0"
		label <- MakeLabel("WRONG", gErrorFont)
	}

	Move(label, gWidth/2, 300)
	DrawAndWait(label, gWindow, 500)
	Hide(tb)
}

define ExecuteTest(sound, iterator)
{
	track <- LoadSound(sound)
	play <- PlayBackground(track)
	ShowMathProblems(iterator)
	gShowedWords <- ListToString(gShowedWords)
	CheckWords(gShowedWords)
	Stop(track)
}